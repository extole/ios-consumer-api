//
// V6audienceListsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class V6audienceListsAPI {
    /**
     Archives an AudienceList

     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archive(audienceId: String, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        archiveWithRequestBuilder(audienceId: audienceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Archives an AudienceList
     - POST /v6/audience-lists/{audienceId}/archive

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter audienceId: (path) The AudienceList unique identifier 

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func archiveWithRequestBuilder(audienceId: String) -> RequestBuilder<AudienceListResponse> {
        var path = "/v6/audience-lists/{audienceId}/archive"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Gets AudienceList details

     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func callGet(audienceId: String, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        callGetWithRequestBuilder(audienceId: audienceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets AudienceList details
     - GET /v6/audience-lists/{audienceId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter audienceId: (path) The AudienceList unique identifier 

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func callGetWithRequestBuilder(audienceId: String) -> RequestBuilder<AudienceListResponse> {
        var path = "/v6/audience-lists/{audienceId}"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a new AudienceList

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: AudienceListRequest, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a new AudienceList
     - POST /v6/audience-lists
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func createWithRequestBuilder(body: AudienceListRequest) -> RequestBuilder<AudienceListResponse> {
        let path = "/v6/audience-lists"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Returns AudienceList content in specified format

     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter format: (path) Format parameter 
     - parameter contentType: (header)  (optional)
     - parameter limit: (query) Limit parameter (optional)
     - parameter offset: (query) Offset parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func download(audienceId: String, format: String, contentType: String? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadWithRequestBuilder(audienceId: audienceId, format: format, contentType: contentType, limit: limit, offset: offset).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Returns AudienceList content in specified format
     - GET /v6/audience-lists/{audienceId}/download{format}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter format: (path) Format parameter 
     - parameter contentType: (header)  (optional)
     - parameter limit: (query) Limit parameter (optional)
     - parameter offset: (query) Offset parameter (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func downloadWithRequestBuilder(audienceId: String, format: String, contentType: String? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Void> {
        var path = "/v6/audience-lists/{audienceId}/download{format}"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(format)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter states
     */
    public enum States_list: String { 
        case draft = "DRAFT"
        case building = "BUILDING"
        case ready = "READY"
        case failed = "FAILED"
        case expired = "EXPIRED"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_list: String { 
        case _static = "STATIC"
        case _dynamic = "DYNAMIC"
        case uploaded = "UPLOADED"
    }

    /**
     Lists AudienceList details

     - parameter name: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter states: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter includeArchived: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(name: String? = nil, tags: [String]? = nil, states: [String]? = nil, type: ModelType_list? = nil, includeArchived: Bool? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: [AudienceListResponse]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(name: name, tags: tags, states: states, type: type, includeArchived: includeArchived, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Lists AudienceList details
     - GET /v6/audience-lists
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}, {
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
} ]}]
     - parameter name: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter states: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter includeArchived: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)

     - returns: RequestBuilder<[AudienceListResponse]> 
     */
    open class func listWithRequestBuilder(name: String? = nil, tags: [String]? = nil, states: [String]? = nil, type: ModelType_list? = nil, includeArchived: Bool? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[AudienceListResponse]> {
        let path = "/v6/audience-lists"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "tags": tags, 
                        "states": states, 
                        "type": type?.rawValue, 
                        "include_archived": includeArchived, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[AudienceListResponse]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Refreshes the AudienceList, in case of DynamicAudienceList it is re-executed

     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refresh(audienceId: String, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        refreshWithRequestBuilder(audienceId: audienceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refreshes the AudienceList, in case of DynamicAudienceList it is re-executed
     - POST /v6/audience-lists/{audienceId}/refresh
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter audienceId: (path) The AudienceList unique identifier 

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func refreshWithRequestBuilder(audienceId: String) -> RequestBuilder<AudienceListResponse> {
        var path = "/v6/audience-lists/{audienceId}/refresh"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Creates a snapshot for the AudienceList

     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func snapshot(audienceId: String, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        snapshotWithRequestBuilder(audienceId: audienceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a snapshot for the AudienceList
     - POST /v6/audience-lists/{audienceId}/snapshot
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter audienceId: (path) The AudienceList unique identifier 

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func snapshotWithRequestBuilder(audienceId: String) -> RequestBuilder<AudienceListResponse> {
        var path = "/v6/audience-lists/{audienceId}/snapshot"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Updates an existing AudienceList

     - parameter body: (body)  
     - parameter audienceId: (path) The AudienceList unique identifier 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: AudienceListRequest, audienceId: String, completion: @escaping ((_ data: AudienceListResponse?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, audienceId: audienceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates an existing AudienceList
     - PUT /v6/audience-lists/{audienceId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "event_columns" : [ "event_columns", "event_columns" ],
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "error_code" : "error_code",
  "id" : "id",
  "state" : "DRAFT",
  "event_data" : {
    "key" : "event_data"
  },
  "type" : "STATIC",
  "member_count" : 0,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter body: (body)  
     - parameter audienceId: (path) The AudienceList unique identifier 

     - returns: RequestBuilder<AudienceListResponse> 
     */
    open class func updateWithRequestBuilder(body: AudienceListRequest, audienceId: String) -> RequestBuilder<AudienceListResponse> {
        var path = "/v6/audience-lists/{audienceId}"
        let audienceIdPreEscape = "\(audienceId)"
        let audienceIdPostEscape = audienceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{audienceId}", with: audienceIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AudienceListResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
