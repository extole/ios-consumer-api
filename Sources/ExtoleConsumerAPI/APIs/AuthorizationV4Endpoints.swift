//
// AuthorizationV4Endpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AuthorizationV4Endpoints {
    /**
     Deletes the unique access token identified in the request from the associate user's profile.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteToken(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTokenWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the unique access token identified in the request from the associate user's profile.
     - DELETE /v4/token

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTokenWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v4/token"
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Deletes the unique access token identified in the request from the associate user's profile.

     - parameter token: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteToken(token: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes the unique access token identified in the request from the associate user's profile.
     - DELETE /v4/token/{token}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter token: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTokenWithRequestBuilder(token: String) -> RequestBuilder<Void> {
        var path = "/v4/token/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     By calling the Get Token endpoint a new access token is created.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getToken(completion: @escaping ((_ data: TokenV4Response?,_ error: Error?) -> Void)) {
        getTokenWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     By calling the Get Token endpoint a new access token is created.
     - GET /v4/token

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "capabilities" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "scopes" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "expires_in" : 0
}}]

     - returns: RequestBuilder<TokenV4Response> 
     */
    open class func getTokenWithRequestBuilder() -> RequestBuilder<TokenV4Response> {
        let path = "/v4/token"
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenV4Response>.Type = ExtoleConsumerAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns the unique access token associated with the user in the browser.

     - parameter token: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenDetails(token: String, completion: @escaping ((_ data: TokenV4Response?,_ error: Error?) -> Void)) {
        getTokenDetailsWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the unique access token associated with the user in the browser.
     - GET /v4/token/{token}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "capabilities" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "scopes" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "expires_in" : 0
}}]
     - parameter token: (path)  

     - returns: RequestBuilder<TokenV4Response> 
     */
    open class func getTokenDetailsWithRequestBuilder(token: String) -> RequestBuilder<TokenV4Response> {
        var path = "/v4/token/{token}"
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenV4Response>.Type = ExtoleConsumerAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns the unique access token associated with the user in the browser.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenPost(completion: @escaping ((_ data: TokenV4Response?,_ error: Error?) -> Void)) {
        getTokenPostWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the unique access token associated with the user in the browser.
     - POST /v4/token/get

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "capabilities" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "scopes" : [ "VERIFIED_CONSUMER", "VERIFIED_CONSUMER" ],
  "expires_in" : 0
}}]

     - returns: RequestBuilder<TokenV4Response> 
     */
    open class func getTokenPostWithRequestBuilder() -> RequestBuilder<TokenV4Response> {
        let path = "/v4/token/get"
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenV4Response>.Type = ExtoleConsumerAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
