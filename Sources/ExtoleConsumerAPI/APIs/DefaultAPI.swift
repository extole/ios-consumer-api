//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Log internally in kibana

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: CreateCreativeLogRequest, completion: @escaping ((_ data: CreateCreativeLogResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Log internally in kibana
     - POST /v4/debug/logs
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "polling_id" : "polling_id"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<CreateCreativeLogResponse> 
     */
    open class func createWithRequestBuilder(body: CreateCreativeLogRequest) -> RequestBuilder<CreateCreativeLogResponse> {
        let path = "/v4/debug/logs"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CreateCreativeLogResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Creates a FileAsset

     - parameter fileAssetMetadata: (form)  (optional)
     - parameter fileInputStreamRequest: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(fileAssetMetadata: FileAssetMetadata? = nil, fileInputStreamRequest: FileInputStreamRequest? = nil, completion: @escaping ((_ data: FileAssetResponse?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(fileAssetMetadata: fileAssetMetadata, fileInputStreamRequest: fileInputStreamRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a FileAsset
     - POST /v6/files
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "size" : 0,
  "user_id" : "user_id",
  "name" : "name",
  "format" : "CSV",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter fileAssetMetadata: (form)  (optional)
     - parameter fileInputStreamRequest: (form)  (optional)

     - returns: RequestBuilder<FileAssetResponse> 
     */
    open class func createWithRequestBuilder(fileAssetMetadata: FileAssetMetadata? = nil, fileInputStreamRequest: FileInputStreamRequest? = nil) -> RequestBuilder<FileAssetResponse> {
        let path = "/v6/files"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let formParams: [String:Any?] = [
                "fileAssetMetadata": fileAssetMetadata,
                "fileInputStreamRequest": fileInputStreamRequest
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FileAssetResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Used to remove a FileAsset by id

     - parameter fileId: (path) File asset id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(fileId: String, completion: @escaping ((_ data: FileAssetResponse?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(fileId: fileId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Used to remove a FileAsset by id
     - DELETE /v6/files/{fileId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "size" : 0,
  "user_id" : "user_id",
  "name" : "name",
  "format" : "CSV",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter fileId: (path) File asset id 

     - returns: RequestBuilder<FileAssetResponse> 
     */
    open class func deleteWithRequestBuilder(fileId: String) -> RequestBuilder<FileAssetResponse> {
        var path = "/v6/files/{fileId}"
        let fileIdPreEscape = "\(fileId)"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileId}", with: fileIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FileAssetResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Download content for an asset

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadAssetById(personId: String, assetId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadAssetByIdWithRequestBuilder(personId: personId, assetId: assetId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download content for an asset
     - GET /v4/persons/{personId}/assets/{assetId}/download
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 

     - returns: RequestBuilder<Void> 
     */
    open class func downloadAssetByIdWithRequestBuilder(personId: String, assetId: String) -> RequestBuilder<Void> {
        var path = "/v4/persons/{personId}/assets/{assetId}/download"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Download content for an asset

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadAssetByName(personId: String, name: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadAssetByNameWithRequestBuilder(personId: personId, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download content for an asset
     - GET /v4/persons/{personId}/assets/download
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func downloadAssetByNameWithRequestBuilder(personId: String, name: String? = nil) -> RequestBuilder<Void> {
        var path = "/v4/persons/{personId}/assets/download"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name
        ])


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns a FileAsset by id

     - parameter fileId: (path) File asset id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func get(fileId: String, completion: @escaping ((_ data: FileAssetResponse?,_ error: Error?) -> Void)) {
        getWithRequestBuilder(fileId: fileId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a FileAsset by id
     - GET /v6/files/{fileId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "size" : 0,
  "user_id" : "user_id",
  "name" : "name",
  "format" : "CSV",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter fileId: (path) File asset id 

     - returns: RequestBuilder<FileAssetResponse> 
     */
    open class func getWithRequestBuilder(fileId: String) -> RequestBuilder<FileAssetResponse> {
        var path = "/v6/files/{fileId}"
        let fileIdPreEscape = "\(fileId)"
        let fileIdPostEscape = fileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileId}", with: fileIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FileAssetResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns a filtered list of FileAssets

     - parameter name: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(name: String? = nil, userId: String? = nil, tags: [String]? = nil, limit: Int? = nil, offset: Int? = nil, completion: @escaping ((_ data: [FileAssetResponse]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(name: name, userId: userId, tags: tags, limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a filtered list of FileAssets
     - GET /v6/files
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "size" : 0,
  "user_id" : "user_id",
  "name" : "name",
  "format" : "CSV",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "tags" : [ "tags", "tags" ]
}, {
  "size" : 0,
  "user_id" : "user_id",
  "name" : "name",
  "format" : "CSV",
  "id" : "id",
  "created_date" : "2000-01-23T04:56:07.000+00:00",
  "tags" : [ "tags", "tags" ]
} ]}]
     - parameter name: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)

     - returns: RequestBuilder<[FileAssetResponse]> 
     */
    open class func listWithRequestBuilder(name: String? = nil, userId: String? = nil, tags: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<[FileAssetResponse]> {
        let path = "/v6/files"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "user_id": userId, 
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[FileAssetResponse]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get a list of assets

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAssets(personId: String, completion: @escaping ((_ data: [PersonAssetResponse]?,_ error: Error?) -> Void)) {
        listAssetsWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of assets
     - GET /v4/persons/{personId}/assets
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "filename" : "filename",
  "mime_type" : "mime_type",
  "name" : "name",
  "data_type" : "PUBLIC",
  "id" : "id",
  "status" : "PENDING_REVIEW",
  "tags" : [ "tags", "tags" ]
}, {
  "filename" : "filename",
  "mime_type" : "mime_type",
  "name" : "name",
  "data_type" : "PUBLIC",
  "id" : "id",
  "status" : "PENDING_REVIEW",
  "tags" : [ "tags", "tags" ]
} ]}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 

     - returns: RequestBuilder<[PersonAssetResponse]> 
     */
    open class func listAssetsWithRequestBuilder(personId: String) -> RequestBuilder<[PersonAssetResponse]> {
        var path = "/v4/persons/{personId}/assets"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[PersonAssetResponse]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter zoneName: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func post(zoneName: String, body: [String:String]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postWithRequestBuilder(zoneName: zoneName, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /zones/{zone_name}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter zoneName: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postWithRequestBuilder(zoneName: String, body: [String:String]? = nil) -> RequestBuilder<Void> {
        var path = "/zones/{zone_name}"
        let zoneNamePreEscape = "\(zoneName)"
        let zoneNamePostEscape = zoneNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zone_name}", with: zoneNamePostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func post(body: RenderZoneRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /zones

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postWithRequestBuilder(body: RenderZoneRequest? = nil) -> RequestBuilder<Void> {
        let path = "/zones"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Gets Details for an asset

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readAsset(personId: String, assetId: String, completion: @escaping ((_ data: PersonAssetResponse?,_ error: Error?) -> Void)) {
        readAssetWithRequestBuilder(personId: personId, assetId: assetId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets Details for an asset
     - GET /v4/persons/{personId}/assets/{assetId}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "filename" : "filename",
  "mime_type" : "mime_type",
  "name" : "name",
  "data_type" : "PUBLIC",
  "id" : "id",
  "status" : "PENDING_REVIEW",
  "tags" : [ "tags", "tags" ]
}}]
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 

     - returns: RequestBuilder<PersonAssetResponse> 
     */
    open class func readAssetWithRequestBuilder(personId: String, assetId: String) -> RequestBuilder<PersonAssetResponse> {
        var path = "/v4/persons/{personId}/assets/{assetId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PersonAssetResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Record metric internally in grafana

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func record(body: CreativeMetricRequest, completion: @escaping ((_ data: CreativeMetricResponse?,_ error: Error?) -> Void)) {
        recordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Record metric internally in grafana
     - POST /v4/debug/metrics
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "id" : "id"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<CreativeMetricResponse> 
     */
    open class func recordWithRequestBuilder(body: CreativeMetricRequest) -> RequestBuilder<CreativeMetricResponse> {
        let path = "/v4/debug/metrics"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CreativeMetricResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
