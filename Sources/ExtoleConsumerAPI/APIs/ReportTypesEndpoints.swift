//
// ReportTypesEndpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ReportTypesEndpoints {
    /**
     Add report type tags for the specified id.

     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addReportTypeTags(body: [String], _id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        addReportTypeTagsWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add report type tags for the specified id.
     - PUT /v6/report-types/{id}/tags-add
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func addReportTypeTagsWithRequestBuilder(body: [String], _id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}/tags-add"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create a report type.

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createReportType(body: ReportTypeCreateRequest, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        createReportTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a report type.
     - POST /v6/report-types
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func createReportTypeWithRequestBuilder(body: ReportTypeCreateRequest) -> RequestBuilder<ReportTypeResponse> {
        let path = "/v6/report-types"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Delete report type for the specified id.

     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteReportType(_id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        deleteReportTypeWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete report type for the specified id.
     - DELETE /v6/report-types/{id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func deleteReportTypeWithRequestBuilder(_id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete report type client Ids for the specified id.

     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter clientIds: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteReportTypeClients(_id: String, clientIds: [String], completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        deleteReportTypeClientsWithRequestBuilder(_id: _id, clientIds: clientIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete report type client Ids for the specified id.
     - DELETE /v6/report-types/{id}/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter clientIds: (query)  

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func deleteReportTypeClientsWithRequestBuilder(_id: String, clientIds: [String]) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}/clients"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "client_ids": clientIds
        ])


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Delete report type tags for the specified id.

     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteReportTypeTags(body: [String], _id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        deleteReportTypeTagsWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete report type tags for the specified id.
     - PUT /v6/report-types/{id}/tags-delete
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func deleteReportTypeTagsWithRequestBuilder(body: [String], _id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}/tags-delete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Get ids of the clients that have access to the specified report type.

     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listReportTypeClients(_id: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        listReportTypeClientsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get ids of the clients that have access to the specified report type.
     - GET /v6/report-types/{id}/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<[String]> 
     */
    open class func listReportTypeClientsWithRequestBuilder(_id: String) -> RequestBuilder<[String]> {
        var path = "/v6/report-types/{id}/clients"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter visibility
     */
    public enum Visibility_listReportTypes: String { 
        case _public = "PUBLIC"
        case _private = "PRIVATE"
        case extoleOnly = "EXTOLE_ONLY"
    }

    /**
     * enum for parameter orderBy
     */
    public enum OrderBy_listReportTypes: String { 
        case type = "TYPE"
        case _id = "ID"
        case displayName = "DISPLAY_NAME"
        case visibility = "VISIBILITY"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listReportTypes: String { 
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     Gets a list of report types

     - parameter reportTypeId: (query)  (optional)
     - parameter displayName: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter excludeTags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listReportTypes(reportTypeId: String? = nil, displayName: String? = nil, visibility: Visibility_listReportTypes? = nil, tags: String? = nil, excludeTags: String? = nil, limit: Int? = nil, offset: Int? = nil, orderBy: OrderBy_listReportTypes? = nil, order: Order_listReportTypes? = nil, completion: @escaping ((_ data: [ReportTypeResponse]?,_ error: Error?) -> Void)) {
        listReportTypesWithRequestBuilder(reportTypeId: reportTypeId, displayName: displayName, visibility: visibility, tags: tags, excludeTags: excludeTags, limit: limit, offset: offset, orderBy: orderBy, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of report types
     - GET /v6/report-types
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}, {
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
} ]}]
     - parameter reportTypeId: (query)  (optional)
     - parameter displayName: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter excludeTags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter order: (query)  (optional)

     - returns: RequestBuilder<[ReportTypeResponse]> 
     */
    open class func listReportTypesWithRequestBuilder(reportTypeId: String? = nil, displayName: String? = nil, visibility: Visibility_listReportTypes? = nil, tags: String? = nil, excludeTags: String? = nil, limit: Int? = nil, offset: Int? = nil, orderBy: OrderBy_listReportTypes? = nil, order: Order_listReportTypes? = nil) -> RequestBuilder<[ReportTypeResponse]> {
        let path = "/v6/report-types"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "report_type_id": reportTypeId, 
                        "display_name": displayName, 
                        "visibility": visibility?.rawValue, 
                        "tags": tags, 
                        "exclude_tags": excludeTags, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "order_by": orderBy?.rawValue, 
                        "order": order?.rawValue
        ])


        let requestBuilder: RequestBuilder<[ReportTypeResponse]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter visibility
     */
    public enum Visibility_listReportTypesWithClients: String { 
        case _public = "PUBLIC"
        case _private = "PRIVATE"
        case extoleOnly = "EXTOLE_ONLY"
    }

    /**
     * enum for parameter orderBy
     */
    public enum OrderBy_listReportTypesWithClients: String { 
        case type = "TYPE"
        case _id = "ID"
        case displayName = "DISPLAY_NAME"
        case visibility = "VISIBILITY"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listReportTypesWithClients: String { 
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
    }

    /**
     Get report types and associated clients.

     - parameter reportTypeId: (query)  (optional)
     - parameter displayName: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter excludeTags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listReportTypesWithClients(reportTypeId: String? = nil, displayName: String? = nil, visibility: Visibility_listReportTypesWithClients? = nil, tags: String? = nil, excludeTags: String? = nil, limit: Int? = nil, offset: Int? = nil, orderBy: OrderBy_listReportTypesWithClients? = nil, order: Order_listReportTypesWithClients? = nil, completion: @escaping ((_ data: [ReportTypeWithClientsResponse]?,_ error: Error?) -> Void)) {
        listReportTypesWithClientsWithRequestBuilder(reportTypeId: reportTypeId, displayName: displayName, visibility: visibility, tags: tags, excludeTags: excludeTags, limit: limit, offset: offset, orderBy: orderBy, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get report types and associated clients.
     - GET /v6/report-types/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example=[ {
  "report_type" : {
    "formats" : [ "JSON", "JSON" ],
    "visibility" : "PUBLIC",
    "data_start" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "type" : "SQL",
    "display_name" : "display_name",
    "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
    "tags" : [ {
      "name" : "name",
      "type" : "GLOBAL"
    }, {
      "name" : "name",
      "type" : "GLOBAL"
    } ],
    "preview_columns" : [ {
      "note" : "note",
      "sample_value" : "sample_value",
      "name" : "name"
    }, {
      "note" : "note",
      "sample_value" : "sample_value",
      "name" : "name"
    } ],
    "executor_type" : "SQL",
    "name" : "name",
    "categories" : [ "categories", "categories" ],
    "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
    "parameters" : [ {
      "is_required" : true,
      "name" : "name",
      "default_value" : "default_value",
      "display_name" : "display_name",
      "category" : "category",
      "type" : {
        "values" : [ "values", "values" ],
        "name" : "BOOLEAN"
      },
      "order" : 0
    }, {
      "is_required" : true,
      "name" : "name",
      "default_value" : "default_value",
      "display_name" : "display_name",
      "category" : "category",
      "type" : {
        "values" : [ "values", "values" ],
        "name" : "BOOLEAN"
      },
      "order" : 0
    } ]
  },
  "client_ids" : [ "client_ids", "client_ids" ]
}, {
  "report_type" : {
    "formats" : [ "JSON", "JSON" ],
    "visibility" : "PUBLIC",
    "data_start" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "type" : "SQL",
    "display_name" : "display_name",
    "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
    "tags" : [ {
      "name" : "name",
      "type" : "GLOBAL"
    }, {
      "name" : "name",
      "type" : "GLOBAL"
    } ],
    "preview_columns" : [ {
      "note" : "note",
      "sample_value" : "sample_value",
      "name" : "name"
    }, {
      "note" : "note",
      "sample_value" : "sample_value",
      "name" : "name"
    } ],
    "executor_type" : "SQL",
    "name" : "name",
    "categories" : [ "categories", "categories" ],
    "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
    "parameters" : [ {
      "is_required" : true,
      "name" : "name",
      "default_value" : "default_value",
      "display_name" : "display_name",
      "category" : "category",
      "type" : {
        "values" : [ "values", "values" ],
        "name" : "BOOLEAN"
      },
      "order" : 0
    }, {
      "is_required" : true,
      "name" : "name",
      "default_value" : "default_value",
      "display_name" : "display_name",
      "category" : "category",
      "type" : {
        "values" : [ "values", "values" ],
        "name" : "BOOLEAN"
      },
      "order" : 0
    } ]
  },
  "client_ids" : [ "client_ids", "client_ids" ]
} ]}]
     - parameter reportTypeId: (query)  (optional)
     - parameter displayName: (query)  (optional)
     - parameter visibility: (query)  (optional)
     - parameter tags: (query)  (optional)
     - parameter excludeTags: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter order: (query)  (optional)

     - returns: RequestBuilder<[ReportTypeWithClientsResponse]> 
     */
    open class func listReportTypesWithClientsWithRequestBuilder(reportTypeId: String? = nil, displayName: String? = nil, visibility: Visibility_listReportTypesWithClients? = nil, tags: String? = nil, excludeTags: String? = nil, limit: Int? = nil, offset: Int? = nil, orderBy: OrderBy_listReportTypesWithClients? = nil, order: Order_listReportTypesWithClients? = nil) -> RequestBuilder<[ReportTypeWithClientsResponse]> {
        let path = "/v6/report-types/clients"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "report_type_id": reportTypeId, 
                        "display_name": displayName, 
                        "visibility": visibility?.rawValue, 
                        "tags": tags, 
                        "exclude_tags": excludeTags, 
                        "limit": limit?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "order_by": orderBy?.rawValue, 
                        "order": order?.rawValue
        ])


        let requestBuilder: RequestBuilder<[ReportTypeWithClientsResponse]>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get report type for the specified id.

     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readReportType(_id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        readReportTypeWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get report type for the specified id.
     - GET /v6/report-types/{id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func readReportTypeWithRequestBuilder(_id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update report type for the specified id.

     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateReportType(body: ReportTypeUpdateRequest, _id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        updateReportTypeWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update report type for the specified id.
     - PUT /v6/report-types/{id}
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func updateReportTypeWithRequestBuilder(body: ReportTypeUpdateRequest, _id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Update report type client Ids for the specified id.

     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateReportTypeClients(body: [String], _id: String, completion: @escaping ((_ data: ReportTypeResponse?,_ error: Error?) -> Void)) {
        updateReportTypeClientsWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update report type client Ids for the specified id.
     - PUT /v6/report-types/{id}/clients
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "formats" : [ "JSON", "JSON" ],
  "visibility" : "PUBLIC",
  "data_start" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "type" : "SQL",
  "display_name" : "display_name",
  "allowed_scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "tags" : [ {
    "name" : "name",
    "type" : "GLOBAL"
  }, {
    "name" : "name",
    "type" : "GLOBAL"
  } ],
  "preview_columns" : [ {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  }, {
    "note" : "note",
    "sample_value" : "sample_value",
    "name" : "name"
  } ],
  "executor_type" : "SQL",
  "name" : "name",
  "categories" : [ "categories", "categories" ],
  "scopes" : [ "CLIENT_SUPERUSER", "CLIENT_SUPERUSER" ],
  "parameters" : [ {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  }, {
    "is_required" : true,
    "name" : "name",
    "default_value" : "default_value",
    "display_name" : "display_name",
    "category" : "category",
    "type" : {
      "values" : [ "values", "values" ],
      "name" : "BOOLEAN"
    },
    "order" : 0
  } ]
}}]
     - parameter body: (body)  
     - parameter _id: (path) The Extole unique report type identifier. 

     - returns: RequestBuilder<ReportTypeResponse> 
     */
    open class func updateReportTypeClientsWithRequestBuilder(body: [String], _id: String) -> RequestBuilder<ReportTypeResponse> {
        var path = "/v6/report-types/{id}/clients"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReportTypeResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
