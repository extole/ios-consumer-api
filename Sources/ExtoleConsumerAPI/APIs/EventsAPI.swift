//
// EventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class EventsAPI {
    /**
     Submits the event with the name specified in URI.

     - parameter eventName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetch(eventName: String, completion: @escaping ((_ data: SubmitEventResponse?,_ error: Error?) -> Void)) {
        fetchWithRequestBuilder(eventName: eventName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submits the event with the name specified in URI.
     - GET /events/{event_name}

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - examples: [{contentType=application/json, example={
  "cookie_consent" : "cookie_consent",
  "id" : "id",
  "token" : "token"
}}]
     - parameter eventName: (path)  

     - returns: RequestBuilder<SubmitEventResponse> 
     */
    open class func fetchWithRequestBuilder(eventName: String) -> RequestBuilder<SubmitEventResponse> {
        var path = "/events/{event_name}"
        let eventNamePreEscape = "\(eventName)"
        let eventNamePostEscape = eventNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{event_name}", with: eventNamePostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubmitEventResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Submits the event with the name specified in request body.

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func post(body: SubmitEventRequest, completion: @escaping ((_ data: SubmitEventResponse?,_ error: Error?) -> Void)) {
        postWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submits the event with the name specified in request body.
     - POST /events

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - responseHeaders: [null, null, null, null]
     - examples: [{contentType=application/json, example={
  "cookie_consent" : "cookie_consent",
  "id" : "id",
  "token" : "token"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<SubmitEventResponse> 
     */
    open class func postWithRequestBuilder(body: SubmitEventRequest) -> RequestBuilder<SubmitEventResponse> {
        let path = "/events"
        let URLString = ExtoleConsumerAPIAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubmitEventResponse>.Type = ExtoleConsumerAPIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
