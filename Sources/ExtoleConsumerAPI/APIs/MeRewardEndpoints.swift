//
// MeRewardEndpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MeRewardEndpoints {
    /**

     - parameter pollingId: (query)  (optional)
     - parameter rewardName: (query)  (optional)
     - parameter partnerEventId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRewardStatus(pollingId: String? = nil, rewardName: String? = nil, partnerEventId: String? = nil, completion: @escaping ((_ data: PollingRewardResponse?,_ error: Error?) -> Void)) {
        getRewardStatusWithRequestBuilder(pollingId: pollingId, rewardName: rewardName, partnerEventId: partnerEventId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v4/me/rewards/status

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - examples: [{contentType=application/json, example={
  "reward" : {
    "reward_supplier_id" : "reward_supplier_id",
    "amount" : "amount",
    "date_delivered" : "date_delivered",
    "partner_reward_id" : "partner_reward_id",
    "code" : "code",
    "expiry_date" : "expiry_date",
    "sandbox" : "sandbox",
    "face_value_type" : "PERCENT_OFF",
    "program_label" : "program_label",
    "face_value" : "face_value",
    "type" : "TANGO_V2",
    "tags" : [ "tags", "tags" ],
    "date_earned" : "date_earned",
    "redeemed_date" : "redeemed_date",
    "slots" : [ "slots", "slots" ],
    "partner_reward_supplier_id" : "partner_reward_supplier_id",
    "date_issued" : "date_issued",
    "reward_name" : "reward_name",
    "reward_id" : "reward_id",
    "state" : "state",
    "id" : "id",
    "campaign_id" : "campaign_id"
  },
  "quality_results" : [ {
    "score" : "ERROR",
    "quality_rule_results" : [ {
      "score" : "ERROR",
      "rule_name" : "rule_name"
    }, {
      "score" : "ERROR",
      "rule_name" : "rule_name"
    } ]
  }, {
    "score" : "ERROR",
    "quality_rule_results" : [ {
      "score" : "ERROR",
      "rule_name" : "rule_name"
    }, {
      "score" : "ERROR",
      "rule_name" : "rule_name"
    } ]
  } ],
  "status" : "PENDING"
}}]
     - parameter pollingId: (query)  (optional)
     - parameter rewardName: (query)  (optional)
     - parameter partnerEventId: (query)  (optional)

     - returns: RequestBuilder<PollingRewardResponse> 
     */
    open class func getRewardStatusWithRequestBuilder(pollingId: String? = nil, rewardName: String? = nil, partnerEventId: String? = nil) -> RequestBuilder<PollingRewardResponse> {
        let path = "/v4/me/rewards/status"
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "polling_id": pollingId, 
                        "reward_name": rewardName, 
                        "partner_event_id": partnerEventId
        ])


        let requestBuilder: RequestBuilder<PollingRewardResponse>.Type = ExtoleConsumerAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
