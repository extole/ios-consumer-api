//
// PersonAssetsEndpoints.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PersonAssetsEndpoints {
    /**
     Download asset by personId and assetId

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 
     - parameter defaultUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadAssetById(personId: String, assetId: String, defaultUrl: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadAssetByIdWithRequestBuilder(personId: personId, assetId: assetId, defaultUrl: defaultUrl).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download asset by personId and assetId
     - GET /web/persons/{personId}/assets/{assetId}/download
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter assetId: (path) The Extole unique profile identifier of this asset at Extole. 
     - parameter defaultUrl: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func downloadAssetByIdWithRequestBuilder(personId: String, assetId: String, defaultUrl: String? = nil) -> RequestBuilder<Void> {
        var path = "/web/persons/{personId}/assets/{assetId}/download"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let assetIdPreEscape = "\(assetId)"
        let assetIdPostEscape = assetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assetId}", with: assetIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "default_url": defaultUrl
        ])


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Download asset by personId and name

     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)
     - parameter defaultUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadAssetByName(personId: String, name: String? = nil, defaultUrl: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        downloadAssetByNameWithRequestBuilder(personId: personId, name: name, defaultUrl: defaultUrl).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Download asset by personId and name
     - GET /web/persons/{personId}/assets/download
     - 

     - API Key:
       - type: apiKey access_token (QUERY)
       - name: COOKIE
     - API Key:
       - type: apiKey Authorization 
       - name: HEADER
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: QUERY
     - parameter personId: (path) The Extole unique profile identifier of this user at Extole. 
     - parameter name: (query)  (optional)
     - parameter defaultUrl: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func downloadAssetByNameWithRequestBuilder(personId: String, name: String? = nil, defaultUrl: String? = nil) -> RequestBuilder<Void> {
        var path = "/web/persons/{personId}/assets/download"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = ExtoleConsumerAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name, 
                        "default_url": defaultUrl
        ])


        let requestBuilder: RequestBuilder<Void>.Type = ExtoleConsumerAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
