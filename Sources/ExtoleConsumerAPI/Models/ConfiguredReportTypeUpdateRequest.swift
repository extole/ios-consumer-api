//
// ConfiguredReportTypeUpdateRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ConfiguredReportTypeUpdateRequest: Codable {

    public enum ModelType: String, Codable { 
        case sql = "SQL"
        case spark = "SPARK"
        case dashboard = "DASHBOARD"
        case configured = "CONFIGURED"
    }
    public enum Scopes: String, Codable { 
        case clientSuperuser = "CLIENT_SUPERUSER"
        case clientAdmin = "CLIENT_ADMIN"
        case consumerPublic = "CONSUMER_PUBLIC"
    }
    public enum Visibility: String, Codable { 
        case _public = "PUBLIC"
        case _private = "PRIVATE"
        case extoleOnly = "EXTOLE_ONLY"
    }
    public enum Formats: String, Codable { 
        case json = "JSON"
        case csv = "CSV"
        case xlsx = "XLSX"
        case psv = "PSV"
        case headlessCsv = "HEADLESS_CSV"
        case headlessPsv = "HEADLESS_PSV"
    }
    public enum AllowedScopes: String, Codable { 
        case clientSuperuser = "CLIENT_SUPERUSER"
        case clientAdmin = "CLIENT_ADMIN"
        case consumerPublic = "CONSUMER_PUBLIC"
    }
    public var type: ModelType?
    public var tags: [ReportTypeTagRequest]?
    public var displayName: String?
    public var _description: String?
    public var categories: [String]?
    public var scopes: [Scopes]?
    public var visibility: Visibility?
    public var parameters: [ReportTypeParameterDetailsRequest]?
    public var formats: [Formats]?
    public var allowedScopes: [AllowedScopes]?
    public var dataStart: Date?

    public init(type: ModelType? = nil, tags: [ReportTypeTagRequest]? = nil, displayName: String? = nil, _description: String? = nil, categories: [String]? = nil, scopes: [Scopes]? = nil, visibility: Visibility? = nil, parameters: [ReportTypeParameterDetailsRequest]? = nil, formats: [Formats]? = nil, allowedScopes: [AllowedScopes]? = nil, dataStart: Date? = nil) {
        self.type = type
        self.tags = tags
        self.displayName = displayName
        self._description = _description
        self.categories = categories
        self.scopes = scopes
        self.visibility = visibility
        self.parameters = parameters
        self.formats = formats
        self.allowedScopes = allowedScopes
        self.dataStart = dataStart
    }

    public enum CodingKeys: String, CodingKey { 
        case type
        case tags
        case displayName = "display_name"
        case _description = "description"
        case categories
        case scopes
        case visibility
        case parameters
        case formats
        case allowedScopes = "allowed_scopes"
        case dataStart = "data_start"
    }

}
